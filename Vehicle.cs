//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApp
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data.Entity;
    using System.IO;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Windows.Media;
    using System.Windows.Media.Imaging;
    using WpfApp.Classes;

    public partial class Vehicle : INotifyPropertyChanged
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Vehicle()
        {
            this.Bookings = new HashSet<Booking>();
            this.Reviews = new HashSet<Review>();
            this.VehicleImages = new HashSet<VehicleImage>();
        }
    
        public int VehicleID { get; set; }
        public string Make { get; set; }
        public string Model { get; set; }
        public int Year { get; set; }
        public string LicensePlate { get; set; }
        public int VehicleCategoryID { get; set; }
        public decimal DailyRate { get; set; }
        public bool Available { get; set; }
        public System.DateTime CreatedAt { get; set; }
        public Nullable<decimal> AvgRating { get; set; }
        public string FullName
        {
            get { return $"{Make} {Model} {Year}"; }
        }

        private Task<ImageSource> _imageLoadingTask;

        private ImageSource _vehicleImageSource;
        public ImageSource VehicleImageSource
        {
            get
            {
                if (_vehicleImageSource != null)
                    return _vehicleImageSource;

                if (VehicleImages != null && VehicleImages.Count > 0)
                {
                    var firstImage = VehicleImages.FirstOrDefault();
                    if (firstImage != null && !string.IsNullOrEmpty(firstImage.ImagePath))
                    {
                        try
                        {
                            _vehicleImageSource = new BitmapImage(new Uri(firstImage.ImagePath));
                        }
                        catch
                        {
                            _vehicleImageSource = new BitmapImage(new Uri("pack://application:,,,/Resources/Images/car_placeholder.png"));
                        }
                    }
                }


                return _vehicleImageSource;
            }
        }

        public async Task<ImageSource> GetImageSourceAsync()
        {
            try
            {
                if (VehicleImages != null && VehicleImages.Count > 0)
                {
                    var firstImage = VehicleImages.FirstOrDefault();
                    if (firstImage != null && !string.IsNullOrEmpty(firstImage.ImagePath))
                    {
                        var imageSource = await ImageCache.GetImageAsync(firstImage.ImagePath);
                        _vehicleImageSource = imageSource;
                        return imageSource;
                    }
                }
                else
                {
                    using (var context = new DBEntities())
                    {
                        var images = await context.VehicleImages
                            .Where(vi => vi.VehicleID == VehicleID)
                            .ToListAsync();

                        if (images.Count > 0 && !string.IsNullOrEmpty(images[0].ImagePath))
                        {
                            var imageSource = await ImageCache.GetImageAsync(images[0].ImagePath);
                            _vehicleImageSource = imageSource;
                            return imageSource;
                        }
                    }
                }
                _vehicleImageSource = GetPlaceholderImage();
                return _vehicleImageSource;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in LoadImageSourceAsync: {ex.Message}");
                _vehicleImageSource = GetPlaceholderImage();
                return _vehicleImageSource;
            }
        }


        private async Task<ImageSource> LoadImageSourceAsync()
        {
            try
            {
                if (VehicleImages != null && VehicleImages.Count > 0)
                {
                    var firstImage = VehicleImages.FirstOrDefault();
                    if (firstImage != null && !string.IsNullOrEmpty(firstImage.ImagePath))
                    {
                        return await ImageCache.GetImageAsync(firstImage.ImagePath);
                    }
                }
                return GetPlaceholderImage();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in LoadImageSourceAsync: {ex.Message}");
                return GetPlaceholderImage();
            }
        }

        private static BitmapImage GetPlaceholderImage()
        {
            return new BitmapImage(new Uri("pack://application:,,,/Resources/Images/car_placeholder.png"));
        }

        public async Task<string[]> GetAllImageUrlsAsync()
        {
            if (VehicleImages == null || VehicleImages.Count == 0)
            {
                using (var context = new DBEntities())
                {
                    var images = await context.VehicleImages
                        .Where(vi => vi.VehicleID == VehicleID)
                        .Select(vi => vi.ImagePath)
                        .ToArrayAsync();

                    return images;
                }
            }

            return VehicleImages.Select(vi => vi.ImagePath).ToArray();
        }

        public event PropertyChangedEventHandler PropertyChanged;
        public void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Booking> Bookings { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Review> Reviews { get; set; }
        public virtual VehicleCategory VehicleCategory { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<VehicleImage> VehicleImages { get; set; }
    }
}
