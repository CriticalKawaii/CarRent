// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WebApplicationAPI.EF;

public partial class Entities : DbContext
{
    public Entities()
    {
    }

    public Entities(DbContextOptions<Entities> options)
        : base(options)
    {
    }

    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<BookingStatus> BookingStatuses { get; set; }

    public virtual DbSet<Insurance> Insurances { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }

    public virtual DbSet<PaymentStatus> PaymentStatuses { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Vehicle> Vehicles { get; set; }

    public virtual DbSet<VehicleCategory> VehicleCategories { get; set; }

    public virtual DbSet<VehicleImage> VehicleImages { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=DB_RentACar.mssql.somee.com;Initial Catalog=DB_RentACar;Persist Security Info=True;User ID=ABTOP_SQLLogin_1;Password=ab5nddh9n8;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Cyrillic_General_CI_AS");

        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(e => e.BookingID).HasName("PK__Bookings__73951ACDE1C0F6C7");

            entity.Property(e => e.ActualCost).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.ReturnDate).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.TotalCost).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Insurance).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.InsuranceID)
                .HasConstraintName("FK__Bookings__Insura__68487DD7");

            entity.HasOne(d => d.Status).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.StatusID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Bookings__Status__4BAC3F29");

            entity.HasOne(d => d.User).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.UserID)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__Bookings__Renter__4AB81AF0");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.VehicleID)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__Bookings__CarID__49C3F6B7");
        });

        modelBuilder.Entity<BookingStatus>(entity =>
        {
            entity.HasKey(e => e.BookingStatusID).HasName("PK__BookingS__54F9C0BDC6EC3200");

            entity.Property(e => e.BookingStatus1)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("BookingStatus");
        });

        modelBuilder.Entity<Insurance>(entity =>
        {
            entity.HasKey(e => e.InsuranceID).HasName("PK__Insuranc__74231BC4CA5C2E4F");

            entity.Property(e => e.InsuranceDetails)
                .IsRequired()
                .HasMaxLength(300);
            entity.Property(e => e.InsuranceName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.InsurancePrice).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaymentID).HasName("PK__Payments__9B556A586E33B639");

            entity.Property(e => e.Amount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Booking).WithMany(p => p.Payments)
                .HasForeignKey(d => d.BookingID)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__Payments__Bookin__534D60F1");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.Payments)
                .HasForeignKey(d => d.PaymentMethodID)
                .HasConstraintName("FK__Payments__Paymen__59FA5E80");

            entity.HasOne(d => d.PaymentStatus).WithMany(p => p.Payments)
                .HasForeignKey(d => d.PaymentStatusID)
                .HasConstraintName("FK__Payments__Paymen__5AEE82B9");
        });

        modelBuilder.Entity<PaymentMethod>(entity =>
        {
            entity.HasKey(e => e.PaymentMethodID).HasName("PK__PaymentM__DC31C1F32B0E7D70");

            entity.Property(e => e.PaymentMethod1)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("PaymentMethod");
        });

        modelBuilder.Entity<PaymentStatus>(entity =>
        {
            entity.HasKey(e => e.PaymentStatusID).HasName("PK__PaymentS__34F8AC1F35F3D479");

            entity.Property(e => e.PaymentStatus1)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("PaymentStatus");
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.ReviewID).HasName("PK__Reviews__74BC79AE99D08A32");

            entity.ToTable(tb => tb.HasTrigger("trg_UpdateVehicleRating"));

            entity.Property(e => e.Comment).HasMaxLength(500);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.User).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.UserID)
                .HasConstraintName("FK__Reviews__UserID__5BE2A6F2");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.VehicleID)
                .HasConstraintName("FK_Reviews_Vehicles");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleID).HasName("PK__Roles__8AFACE3A7969BC7C");

            entity.Property(e => e.Role1)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("Role");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserID).HasName("PK__Users__1788CCAC48F90411");

            entity.HasIndex(e => e.Email, "UQ__Users__A9D105345A688893").IsUnique();

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Users_Roles");
        });

        modelBuilder.Entity<Vehicle>(entity =>
        {
            entity.HasKey(e => e.VehicleID).HasName("PK__Vehicles__476B54B216C8883C");

            entity.HasIndex(e => e.LicensePlate, "UQ__Vehicles__026BC15CD8052416").IsUnique();

            entity.Property(e => e.Available).HasDefaultValue(true);
            entity.Property(e => e.AvgRating)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(3, 2)");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DailyRate).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.LicensePlate)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Make)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Model)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.VehicleCategory).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.VehicleCategoryID)
                .HasConstraintName("FK__Vehicles__Catego__4316F928");
        });

        modelBuilder.Entity<VehicleCategory>(entity =>
        {
            entity.HasKey(e => e.VehicleCategoryID).HasName("PK__VehicleC__55CCA547F2D184FC");

            entity.Property(e => e.VehicleCategory1)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("VehicleCategory");
        });

        modelBuilder.Entity<VehicleImage>(entity =>
        {
            entity.HasKey(e => e.ImageId).HasName("PK__VehicleI__7516F70C2B54C556");

            entity.Property(e => e.ImagePath)
                .IsRequired()
                .HasMaxLength(500);

            entity.HasOne(d => d.Vehicle).WithMany(p => p.VehicleImages)
                .HasForeignKey(d => d.VehicleId)
                .HasConstraintName("FK__VehicleIm__Vehic__5EBF139D");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}